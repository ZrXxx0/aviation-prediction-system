# Generated by Django 4.2.23 on 2025-08-04 01:52

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('lgb', 'LightGBM'), ('xgb', 'XGBoost')], max_length=10)),
                ('granularity', models.CharField(choices=[('monthly', '月度'), ('quarterly', '季度'), ('yearly', '年度')], max_length=10)),
                ('parameters', models.JSONField(help_text='模型超参数配置')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'unique_together': {('name', 'granularity', 'parameters')},
            },
        ),
        migrations.CreateModel(
            name='MacroEconomicIndicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(help_text='城市名称', max_length=50)),
                ('city_code', models.CharField(blank=True, help_text='三字码', max_length=10, null=True)),
                ('province', models.CharField(help_text='所属省份', max_length=50)),
                ('period', models.DateField(help_text='统计周期（年月）')),
                ('gdp', models.FloatField(help_text='GDP（亿元）')),
                ('population', models.FloatField(help_text='人口（万人）')),
                ('tertiary_industry_ratio', models.FloatField(help_text='第三产业占比（%）')),
                ('income_per_capita', models.FloatField(help_text='人均可支配收入（元）')),
                ('retail_total', models.FloatField(help_text='社会消费品零售总额（万元）')),
                ('employment_total', models.FloatField(help_text='三产业就业人数总和（万人）')),
                ('air_passenger_volume', models.FloatField(help_text='民用航空客运量（万人）')),
            ],
            options={
                'ordering': ['-period'],
                'unique_together': {('city', 'period')},
            },
        ),
        migrations.CreateModel(
            name='FlightStatRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin', models.CharField(help_text='出发城市', max_length=50)),
                ('destination', models.CharField(help_text='到达城市', max_length=50)),
                ('aircraft_type', models.CharField(help_text='机型', max_length=50)),
                ('period', models.DateField(help_text='统计周期（年月）')),
                ('period_type', models.CharField(choices=[('monthly', '月度'), ('quarterly', '季度'), ('yearly', '年度')], max_length=10)),
                ('actual_volume', models.FloatField(help_text='实际客运量（人次）')),
                ('available_capacity', models.FloatField(help_text='可用运力（座位数）')),
                ('flights', models.IntegerField(help_text='航班频次')),
                ('load_factor', models.FloatField(help_text='客座率')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '航线运量记录',
                'verbose_name_plural': '航线运量记录（所有）',
                'ordering': ['-period'],
                'unique_together': {('origin', 'destination', 'aircraft_type', 'period', 'period_type')},
            },
        ),
        migrations.CreateModel(
            name='PredictionRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin', models.CharField(help_text='出发城市', max_length=50)),
                ('destination', models.CharField(help_text='到达城市', max_length=50)),
                ('origin_code', models.CharField(max_length=10)),
                ('destination_code', models.CharField(max_length=10)),
                ('period_type', models.CharField(choices=[('monthly', '月度'), ('quarterly', '季度'), ('yearly', '年度')], max_length=10)),
                ('prediction_date', models.DateField()),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('result_file', models.FileField(blank=True, null=True, upload_to='predictions/')),
                ('features_summary', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(help_text='使用的预测模型', on_delete=django.db.models.deletion.PROTECT, related_name='predictions', to='predict.mlmodel')),
            ],
            options={
                'ordering': ['-prediction_date'],
                'unique_together': {('origin', 'destination', 'period_type', 'period_start', 'period_end', 'model')},
            },
        ),
    ]